{
	"info": {
		"_postman_id": "074ad439-6f57-4482-9832-6b697725326b",
		"name": "AbEntry",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "AbEntry CRUD",
			"item": [
				{
					"name": "Read AbEntries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "826fa8fb-5c26-4b0c-817e-9e0f54b2a80a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e094a848-d765-4715-932b-4c15d10daf33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AbEntry\":{\r\n      \"Criteria\":{\r\n         \"SearchQuery\":{\r\n         },\r\n         \"top\": 3\r\n      },\r\n      \"Scope\":{\r\n         \"Fields\":{\r\n            \"Key\":1,\r\n            \"Type\":1,\r\n            \"DisplayValue\":1,\r\n            \"Phone\":1,\r\n            \"Email\":1,\r\n            \"Address\":{\r\n                \"DisplayValue\":1\r\n            },\r\n            \"AccountManager\":[1],\r\n            \"LastContactDate\":1,\r\n            \"Udf/$NAME(Do not solicit by)\":[1]\r\n         }\r\n      },\r\n      \"OrderBy\":{\r\n          \"Fields\":[\r\n              { \"LastModifyDate\":\"DESC\" }\r\n          ]\r\n      }\r\n   },\r\n   \"Configuration\":{  \r\n      \"Drivers\":{  \r\n         \"IAbEntrySearcher\":\"Maximizer.Model.Access.Sql.AbEntrySearcher\"\r\n      }\r\n   },\r\n   \"Compatibility\":{\r\n       \"AbEntryKey\":\"2.0\"\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/AbEntryRead",
						"description": "Use the `AbEntryRead` method to search for Address Book entries in the database."
					},
					"response": []
				},
				{
					"name": "Read Companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "826fa8fb-5c26-4b0c-817e-9e0f54b2a80a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "938f338b-c4b8-450c-b731-0fe2cf5b027f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"token\":\"{{Token}}\",\r\n   \"abEntry\":{\r\n      \"criteria\":{\r\n         \"searchQuery\":{\r\n             \"$AND\":[\r\n                 {\r\n                     \"type\":{\r\n                         \"$EQ\":\"Company\"\r\n                     }\r\n                 }\r\n             ]\r\n         },\r\n         \"top\": 3\r\n      },\r\n      \"scope\":{\r\n         \"fields\":{\r\n            \"key\":1,\r\n            \"type\":1,\r\n            \"companyName\":1,\r\n            \"phone\":1,\r\n            \"email\":1,\r\n            \"webSite\":1,\r\n            \"address\":{\r\n                \"displayValue\":1\r\n            }\r\n         }\r\n      },\r\n      \"orderBy\":{\r\n          \"fields\":[\r\n              { \"lastModifyDate\":\"DESC\" }\r\n          ]\r\n      }\r\n   },\r\n   \"configuration\":{  \r\n      \"drivers\":{  \r\n         \"IAbEntrySearcher\":\"Maximizer.Model.Access.Sql.AbEntrySearcher\"\r\n      }\r\n   },\r\n   \"compatibility\":{\r\n       \"AbEntryKey\":\"2.0\"\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/AbEntryRead",
						"description": "Use the `AbEntryRead` method to search for Address Book entries in the database."
					},
					"response": []
				},
				{
					"name": "Read Contacts of Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "826fa8fb-5c26-4b0c-817e-9e0f54b2a80a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d568c939-2aa0-4d9c-8a1b-d0a77a8a78c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AbEntry\":{\r\n      \"Criteria\":{\r\n         \"SearchQuery\":{\r\n             \"$AND\":[\r\n                 {\r\n                     \"ParentKey\":{\r\n                         \"$EQ\":\"QWJFbnRyeQkyMjA1MDUyNTIyNTIxMjA2ODAwMjJDCTA=\"\r\n                     }\r\n                 }\r\n             ]\r\n         },\r\n         \"top\": 3\r\n      },\r\n      \"Scope\":{\r\n         \"Fields\":{\r\n            \"Key\":1,\r\n            \"Type\":1,\r\n            \"FirstName\":1,\r\n            \"LastName\":1,\r\n            \"CompanyName\":1,\r\n            \"Phone\":1,\r\n            \"Email\":1\r\n         }\r\n      },\r\n      \"OrderBy\":{\r\n          \"Fields\":[\r\n              { \"LastModifyDate\":\"DESC\" }\r\n          ]\r\n      }\r\n   },\r\n   \"Configuration\":{  \r\n      \"Drivers\":{  \r\n         \"IAbEntrySearcher\":\"Maximizer.Model.Access.Sql.AbEntrySearcher\"\r\n      }\r\n   },\r\n   \"Compatibility\":{\r\n       \"AbEntryKey\":\"2.0\"\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/AbEntryRead",
						"description": "Use the `AbEntryRead` method to search for Address Book entries in the database."
					},
					"response": []
				},
				{
					"name": "Read Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "826fa8fb-5c26-4b0c-817e-9e0f54b2a80a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56325dca-116e-4aff-a7be-19aa5dbdd269",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AbEntry\":{\r\n      \"Criteria\":{\r\n         \"SearchQuery\":{\r\n             \"Type\":{\r\n                 \"$EQ\":\"Contact\"\r\n             }\r\n         },\r\n         \"top\": 3\r\n      },\r\n      \"Scope\":{\r\n         \"Fields\":{\r\n            \"Key\":1,\r\n            \"Type\":1,\r\n            \"CompanyName\":1,\r\n            \"FirstName\":1,\r\n            \"LastName\":1,\r\n            \"Phone\":1,\r\n            \"Email\":1,\r\n         }\r\n      },\r\n      \"OrderBy\":{\r\n          \"Fields\":[\r\n              { \"LastModifyDate\":\"DESC\" }\r\n          ]\r\n      }\r\n   },\r\n   \"Configuration\":{  \r\n      \"Drivers\":{  \r\n         \"IAbEntrySearcher\":\"Maximizer.Model.Access.Sql.AbEntrySearcher\"\r\n      }\r\n   },\r\n   \"Compatibility\":{\r\n       \"AbEntryKey\":\"2.0\"\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/AbEntryRead",
						"description": "Use the `AbEntryRead` method to search for Address Book entries in the database."
					},
					"response": []
				},
				{
					"name": "Read [Details] (Contact)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "547310b3-7225-4d32-9bed-4deb3dceb0e5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c911f58-0142-4852-8b6f-31435c435acb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AbEntry\":{\r\n      \"Criteria\":{\r\n         \"SearchQuery\":{\r\n            \"Key\": {\r\n                \"$EQ\":\"QWJFbnRyeQkyMjA1MDUyNTIyNTIxMjA2ODAwMjJDCTE=\"\r\n            }\r\n         }\r\n      },\r\n      \"Scope\":{\r\n         \"Types\":{\r\n            \"*\":1\r\n         }\r\n      }\r\n   },\r\n   \"Configuration\":{  \r\n      \"Drivers\":{  \r\n         \"IAbEntrySearcher\":\"Maximizer.Model.Access.Sql.AbEntrySearcher\"\r\n      }\r\n   },\r\n   \"Compatibility\":{\r\n       \"AbEntryKey\":\"2.0\"\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/AbEntryRead",
						"description": "Use the `AbEntryRead` method to search for Address Book entries in the database."
					},
					"response": []
				},
				{
					"name": "Create an AbEntry (Company)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"if(jsonData && jsonData.AbEntry && jsonData.AbEntry.Data) {   ",
									"    pm.environment.set(\"AbEntryKey\", jsonData.AbEntry.Data.Key);",
									"}"
								],
								"id": "a66e26bb-c97a-4423-a7e2-0a3da9c84681"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "37c4cb6b-079f-4394-8408-a2b6c4ff6748"
							}
						}
					],
					"id": "6963f7a4-b2bc-40df-b27e-c5501e0088af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AbEntry\":{\r\n      \"Data\":{\r\n         \"Key\":null,\r\n         \"Type\":\"Company\",\r\n         \"CompanyName\":\"Postman Example Company\",\r\n         \"Phone1\":{\r\n            \"Default\":true,\r\n            \"Description\":\"Main\",\r\n            \"Number\":\"1-800-123-1234\"\r\n         },\r\n         \"Phone2\":{\r\n            \"Description\":\"Fax\",\r\n            \"Number\":\"123-123-1234\",\r\n            \"Extension\":\"123\"\r\n         },\r\n         \"Phone3\":\"123-123-1234\",\r\n         \"Email1\":{\r\n            \"Description\":\"Main\",\r\n            \"Default\":true,\r\n            \"Address\":\"example@example.com\"\r\n         },\r\n         \"Email2\":\"postman@example.com\",\r\n         \"Address\":{\r\n            \"AddressLine1\":\"1234 Main St.\",\r\n            \"City\":\"Anytown\",\r\n            \"StateProvince\":\"CA\",\r\n            \"ZipCode\":\"12345\",\r\n            \"Country\":\"USA\"\r\n         },\r\n         \"Lead\":true,\r\n         \"WebSite\":\"https://www.example.com/\"\r\n      }\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/AbEntryCreate",
						"description": "Use the `AbEntryCreate` method to create a new Address Book entry in the database."
					},
					"response": []
				},
				{
					"name": "Create an AbEntry (Contact)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9509c945-cb4b-4a60-a7a3-e2b93cbdd4db"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0d880548-b05e-4cb4-985c-92208ab283ed"
							}
						}
					],
					"id": "1ce36ac9-62e9-4744-a919-49042b50a436",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AbEntry\":{\r\n      \"Data\":{\r\n         \"Key\":null,\r\n         \"ParentKey\":\"{{AbEntryKey}}\",\r\n         \"Type\":\"Contact\",\r\n         \"MrMs\":\"Mrs.\",\r\n         \"FirstName\":\"Postman\",\r\n         \"LastName\":\"Example\",\r\n         \"Phone1\":{\r\n            \"Default\":true,\r\n            \"Description\":\"Main\",\r\n            \"Number\":\"123-123-1234\",\r\n            \"Extension\":\"123\"\r\n         },\r\n         \"Phone2\":{\r\n            \"Description\":\"Home\",\r\n            \"Number\":\"789-789-7890\"\r\n         },\r\n         \"Email1\":{\r\n            \"Description\":\"Home\",\r\n            \"Default\":true,\r\n            \"Address\":\"mrspostman@example.com\"\r\n         },\r\n         \"Address\":{\r\n            \"AddressLine1\":\"1234 Main St.\",\r\n            \"City\":\"Anytown\",\r\n            \"StateProvince\":\"CA\",\r\n            \"ZipCode\":\"12345\",\r\n            \"Country\":\"USA\"\r\n         }\r\n      }\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/AbEntryCreate",
						"description": "Use the `AbEntryCreate` method to create a new Address Book entry in the database. When creating a contact, you must supply a valid Company or Individual Key in the `ParentKey` property.\n\nNOTE: You must run the `AbEntryCreate` request *before* running this one so that the `AbEntryKey` environment variable is set."
					},
					"response": []
				}
			],
			"id": "8db663b3-b7b5-4f14-8922-5059d7d857e6"
		},
		{
			"name": "AbEntry Metadata",
			"item": [
				{
					"name": "Read AbEntry Schema (Simple)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2b4d3c9-d9e2-42b0-92c6-e6dbd88cae2f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cad5d67-59c1-41e6-9aae-2c8986d44683",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "772b7723-ee4c-4cd7-88d7-023da7321c1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"Schema\":{\r\n      \"Criteria\":{\r\n         \"SearchQuery\":{\r\n            \"Key\":{\r\n               \"$TREE\":\"/AbEntry\"\r\n            }\r\n         }\r\n      },\r\n      \"Scope\":{\r\n         \"Fields\":1\r\n      }\r\n   },\r\n   \"Compatibility\":{\r\n       \"SchemaObject\":\"2.0\"\r\n   }\r\n}"
						},
						"url": "{{BaseURL}}/Data.svc/json/SchemaRead",
						"description": "Use the `SchemaRead` method to query the structure or metadata of entities in the database."
					},
					"response": []
				},
				{
					"name": "Read AbEntry/AccountManager Field Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d85b6baf-b43b-4741-9118-5e41c2c89097",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c7967d3-638d-4b89-9f7f-5b92f9b43cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "29fdf206-f036-4701-a9c1-3ea47f6bd184",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"AbEntry\":{\r\n        \"FieldOptions\":{\r\n            \"AccountManager\":[\r\n                {\r\n                    \"Key\":1,\r\n                    \"DisplayValue\":1\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"Token\": \"{{Token}}\",\r\n}\r\n\r\n"
						},
						"url": "{{BaseURL}}/Data.svc/json/Read",
						"description": "Use the `AbEntryGetFieldOptions` method to retrieve the options for table-valued fields of AbEntry objects."
					},
					"response": []
				}
			],
			"id": "3f435f4e-d370-4cd3-81c6-83092727c106"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// This script checks to see if there is a valid token in",
					"// the environment before making any requests to the API",
					"// by calling the TokenValid method. If there is already a",
					"// valid token, it does nothing. If there is no token or if",
					"// the token is not valid, it attempts to obtain a new one",
					"// by calling the Authenticate method, and if successful, ",
					"// saves the token to the environment.",
					"",
					"// Get the API URL and check to make sure it is non-empty",
					"const baseURL = pm.environment.get(\"BaseURL\");",
					"if(!baseURL) {",
					"    console.error(\"The BaseURL environment variable is not set.\");",
					"    return;",
					"}",
					"",
					"// If we are calling the Authenticate, TokenValid, or GetSystemInfo",
					"// methods, we don't need a valid token and can skip the rest",
					"let path = pm.request.url.getPath().toLowerCase();",
					"if(path.endsWith(\"authenticate\") ",
					"   || path.endsWith(\"tokenvalid\")",
					"   || path.endsWith(\"getsysteminfo\")) {",
					"    return;",
					"}",
					"",
					"// Check to see if there is already a Token in the environment variable",
					"let token = pm.environment.get(\"Token\");",
					"if(token) {",
					"    // If there is a Token, see if it is still valid",
					"    DoTokenValidRequest(token);",
					"} else {",
					"    // If there is no Token, just call Authenticate",
					"    DoAuthenticateRequest();",
					"}",
					"",
					"//----------------",
					"//Helper Functions",
					"//----------------",
					"",
					"// Calls the TokenValid method",
					"function DoTokenValidRequest(token) {",
					"    console.info(\"Checking to see if token is valid...\");",
					"    // Construct the TokenValid request",
					"    let tokenValidRequest = {",
					"      url: pm.environment.get(\"BaseURL\") + \"/Data.svc/json/TokenValid\",",
					"      method: \"POST\",",
					"      body: {",
					"        mode: \"raw\",",
					"        raw: JSON.stringify({ \"Token\" : pm.environment.get(\"Token\") })",
					"      }",
					"    };",
					"    ",
					"    // Send the TokenValid request to the API",
					"    pm.sendRequest(tokenValidRequest, HandleTokenValidResponse); ",
					"}",
					"",
					"// Handles the TokenValid method response, and calls the ",
					"// Authenticate method if necessary.",
					"function HandleTokenValidResponse(err, res) {",
					"    if(err || !res) {",
					"        // Something went wrong when trying to call the API",
					"        console.error(\"An error occurred when trying to call the TokenValid method.\");",
					"    } else {",
					"        // Check to see if the method was successful",
					"        let jsonData = res.json();",
					"        if(jsonData.Code === 0) {",
					"            console.info(\"The current token is valid.\");",
					"        } else {",
					"            DoAuthenticateRequest();",
					"        }",
					"    }",
					"}",
					"",
					"// Calls the Authenticate method",
					"function DoAuthenticateRequest() {",
					"    // The token is not valid, so we will try to get a new one.",
					"    // Create the Authenticate request body.",
					"    console.info(\"Token is missing or invalid; requesting a new one...\");",
					"    let requestBody = {",
					"        \"Database\": pm.environment.get(\"Database\"),",
					"        \"UID\": pm.environment.get(\"UID\"),",
					"        \"Password\": pm.environment.get(\"Password\")",
					"    };",
					"    ",
					"    // Check to see if the VendorId and AppKey are set, and if",
					"    // they are, add them to the request.",
					"    if(pm.environment.get(\"VendorId\") && pm.environment.get(\"AppKey\")) {",
					"        requestBody.VendorId = pm.environment.get(\"VendorId\");",
					"        requestBody.AppKey = pm.environment.get(\"AppKey\");",
					"    }",
					"    ",
					"    // Create the request object",
					"    let authenticateRequest = {",
					"      url: pm.environment.get(\"BaseURL\") + \"/Data.svc/json/Authenticate\",",
					"      method: \"POST\",",
					"      body: {",
					"        mode: \"raw\",",
					"        raw: JSON.stringify(requestBody)",
					"      }",
					"    };",
					"    ",
					"    // Send the Authenticate request to the API",
					"    pm.sendRequest(authenticateRequest, HandleAuthenticateResponse);    ",
					"}",
					"",
					"// Handles the Authenticate method response and stores the",
					"// new token in the \"Token\" environment variable.",
					"function HandleAuthenticateResponse(err, res) {",
					"    if(err || !res) {",
					"        // The request failed",
					"        console.error(\"An error occurred when trying to call the Authenticate method.\");",
					"    } else {",
					"        // The request succeeded",
					"        let jsonData = res.json();",
					"        if(jsonData.Code === 0) {",
					"            // Store the new token in the environment variable",
					"            // so that we can use it in subsequent requests",
					"            console.info(\"Retrieved new token.\");",
					"            pm.environment.set(\"Token\", jsonData.Data.Token);",
					"        } else {",
					"            // A nonzero Code means that there was an error",
					"            console.error(\"Authentication failed. Check the credentials in the environment.\");",
					"        }",
					"    }",
					"}"
				],
				"id": "19abee8a-d9f1-432a-87a7-7aecf7af88ec"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"pm.test(\"Response Code is 0\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.Code).to.eql(0);",
					"});",
					""
				],
				"id": "23dd8651-faf4-4802-b017-05cac5404369"
			}
		}
	]
}